"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class jointAngles2(object):
    __slots__ = ["timestamp", "angle0", "angle1", "angle2", "angle3", "angle4", "angle5", "angle6", "angle7"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.timestamp = 0.0
        self.angle0 = 0.0
        self.angle1 = 0.0
        self.angle2 = 0.0
        self.angle3 = 0.0
        self.angle4 = 0.0
        self.angle5 = 0.0
        self.angle6 = 0.0
        self.angle7 = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(jointAngles2._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">fffffffff", self.timestamp, self.angle0, self.angle1, self.angle2, self.angle3, self.angle4, self.angle5, self.angle6, self.angle7))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != jointAngles2._get_packed_fingerprint():
            raise ValueError("Decode error")
        return jointAngles2._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = jointAngles2()
        self.timestamp, self.angle0, self.angle1, self.angle2, self.angle3, self.angle4, self.angle5, self.angle6, self.angle7 = struct.unpack(">fffffffff", buf.read(36))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if jointAngles2 in parents: return 0
        tmphash = (0xbb78d9707eb63256) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if jointAngles2._packed_fingerprint is None:
            jointAngles2._packed_fingerprint = struct.pack(">Q", jointAngles2._get_hash_recursive([]))
        return jointAngles2._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

